require('dotenv').config();
var app = require('../app.js');
var debug = require('debug')('backend:server');
var http = require('http');

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
var server = http.createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Function that return a port o a false value when the parameter is undefined.
 * @param value This parameter is the port.
 */
function normalizePort(value) {
    var port = parseInt(value, 10);
    if (isNaN(port)) {
      return value;
    }
    if (port >= 0) {
      return port;
    }
    return false;
}

/**
 * Function that write error in console.
 * @param error This parameter is the server error.
 */
function onError(error){
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);

        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);

        default:
            throw error;
    }
}

/**
 * Function that write the status listening in the console.
 */
function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string' 
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}